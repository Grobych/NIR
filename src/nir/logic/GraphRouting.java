package nir.logic;

import nir.model.Map;
import nir.model.ObstacleList;
import nir.model.route.Route;
import org.apache.commons.math3.distribution.EnumeratedDistribution;
import org.apache.commons.math3.util.Pair;
import org.jgrapht.Graph;
import org.jgrapht.graph.DefaultDirectedWeightedGraph;
import org.jgrapht.graph.DefaultWeightedEdge;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.LineSegment;

import java.util.*;

public class GraphRouting {

    public int nVerticles = 50;
    public int antNumber = 10;
    public int iterationNumber = 50;
    public double p = 0.9; // evaporation coefficient
    public double v = 2; // pheromone size, generated by ant
    public List<Coordinate> coordinates;
    public Graph<Coordinate,DefaultWeightedEdge> graph;
    private HashMap<DefaultWeightedEdge,Double> feromonMap = new HashMap<>();
    List<Ant> ants = new ArrayList<>();
    Coordinate start, end;

    private List<DefaultWeightedEdge> bestRoute;

    public void setParams(int antNumber, int iterationNumber, double pheromone, double evaporation){
        this.antNumber = antNumber;
        this.iterationNumber = iterationNumber;
        this.p = evaporation;
        this.v = pheromone;
    }

    public GraphRouting(Coordinate start, Coordinate end, int nVerticles){
        this.start = start;
        this.end = end;
        this.nVerticles = nVerticles;
    }


    public Route run(){
        generateCoordinates();
        generateGraph();
        return generateRoute();
    }
    public void generateCoordinates(){
        coordinates = generateVerticles(nVerticles, start, end);
    }
    public void generateGraph(){
        graph = createGraph(coordinates);
    }
    public Route generateRoute(){
        initPheromone();
        bestRoute = generateRandomRoute(start,end);
        createAnts(antNumber, start);
        for (int i = 0; i < iterationNumber; i++) {
            for (Ant ant : ants) {
                List<DefaultWeightedEdge> route = generateAntRoute(ant,start,end);
                double routeSize;
                if (route == null) {
//                    System.out.println("null");
                    routeSize = Double.MAX_VALUE;
                } else {
                    routeSize = calculateRouteSize(route);
                }
                if (routeSize < calculateRouteSize(bestRoute)){
                    bestRoute = route;
                }
            }
            updatePheromone();
            createAnts(antNumber,start);
        }
        return toRoute(bestRoute);
    }

    private void updatePheromone() {
        for (DefaultWeightedEdge edge : graph.edgeSet()) {
            graph.setEdgeWeight(edge,graph.getEdgeWeight(edge) * p);
            for (Ant ant : ants) {
                if (ant.isMoved(edge)) graph.setEdgeWeight(edge,graph.getEdgeWeight(edge) + (v / getEdgeSize(edge)));
            }
        }
    }

    private void createAnts(int antNumber, Coordinate start) {
        ants.clear();
        for (int i = 0; i < antNumber; i++) {
            ants.add(new Ant(start));
        }
    }


    private List<Coordinate> generateVerticles(int n, Coordinate start, Coordinate end){
        List<Coordinate> pointList = new ArrayList<>();
        pointList.add(start);
        for (int i = 0; i < n; i++) {
            pointList.add(generateCoordinate(Map.getxSize(),Map.getySize()));
        }
        pointList.add(end);
        return pointList;
    }
    private Coordinate generateCoordinate(int xSize, int ySize){
        Coordinate res;
        do {
            res = new Coordinate(new Random().nextInt(xSize),new Random().nextInt(ySize));
            if (Intersection.isIntersect(res, ObstacleList.obstacles)) res = null;
        } while (res == null);
        return res;
    }
    private Graph<Coordinate, DefaultWeightedEdge> createGraph(List<Coordinate> coordinates){
        Graph<Coordinate, DefaultWeightedEdge> graph = new DefaultDirectedWeightedGraph<>(DefaultWeightedEdge.class);
        for (Coordinate coordinate : coordinates) {
            graph.addVertex(coordinate);
        }
        for (int i = 0; i < coordinates.size() -1; i++) {
            for (int j = i + 1; j < coordinates.size(); j++) {
                LineSegment line = new LineSegment(coordinates.get(i),coordinates.get(j));
                if (!Intersection.isIntersect(line,ObstacleList.obstacles)){
                    graph.addEdge(coordinates.get(i),coordinates.get(j));
                }
            }
        }
        return graph;
    }

    private void initPheromone(){
        double f = 1.0 / graph.edgeSet().size();
        for (DefaultWeightedEdge edge : graph.edgeSet()) {
            graph.setEdgeWeight(edge,f);
        }
    }

    private void showGraph(Graph<Coordinate,DefaultWeightedEdge> graph){
        System.out.println("---------------------------");
        System.out.println(graph.toString());
        System.out.println("---------------------------");
    }

    private double getEdgeSize(DefaultWeightedEdge edge){
        Coordinate c1 = graph.getEdgeSource(edge);
        Coordinate c2 = graph.getEdgeTarget(edge);
        return c1.distance(c2);
    }
    private double calculateRouteSize(List<DefaultWeightedEdge> edges){
        double res = 0;
        for (DefaultWeightedEdge edge : edges) {
            double lenght = getEdgeSize(edge);
            res += lenght;
        }
        return res;
    }

    private List<DefaultWeightedEdge> generateRandomRoute(Coordinate start, Coordinate end){
        Coordinate current = start;
        List<DefaultWeightedEdge> res = new ArrayList<>();
        do {
            DefaultWeightedEdge edge = move(current);
            res.add(edge);
            current = graph.getEdgeTarget(edge);
        } while (current != end);
        return res;
    }
    // TODO: refactor
    private List<DefaultWeightedEdge> generateAntRoute(Ant ant, Coordinate start, Coordinate end){
        Coordinate current = start;
        List<DefaultWeightedEdge> res = new ArrayList<>();
        int i = 0;
        do {
            DefaultWeightedEdge edge = move(current, ant);
            res.add(edge);
            current = graph.getEdgeTarget(edge);
            if (++i == 100) return null;
        } while (current != end);
        return res;
    }

    private DefaultWeightedEdge move(Coordinate from){
        Set<DefaultWeightedEdge> edges = graph.edgesOf(from);
        int random = new Random().nextInt(edges.size());
        return edges.toArray(new DefaultWeightedEdge[edges.size()])[random];
    }
    private DefaultWeightedEdge move(Coordinate from, Ant ant){
        //TODO: rewrite with right function
        Set<DefaultWeightedEdge> edges = graph.edgesOf(from);
        Set<DefaultWeightedEdge> moveSet = new HashSet<>();
        for (DefaultWeightedEdge edge : edges) {
            if (!ant.isMoved(edge)) moveSet.add(edge);
        }
        if (moveSet.size() == 0) {
            DefaultWeightedEdge edge = move(ant.getCurrentCoordinate());
            ant.move(edge,graph.getEdgeTarget(edge));
            return edge;
        } else {
            List<Pair<DefaultWeightedEdge,Double>> pairs = new ArrayList<>();
            for (DefaultWeightedEdge edge : moveSet) {
                pairs.add(new Pair<>(edge,graph.getEdgeWeight(edge)));
            }
            System.out.println(pairs.size());
            EnumeratedDistribution distribution = new EnumeratedDistribution<DefaultWeightedEdge>(pairs);
            DefaultWeightedEdge choose = (DefaultWeightedEdge) distribution.sample();
            ant.move(choose,graph.getEdgeTarget(choose));
            return choose;
        }

    }
    private Route toRoute(List<DefaultWeightedEdge> route){
        List<Coordinate> list = new ArrayList<>();
        list.add(start);
        for (DefaultWeightedEdge edge : route) {
            list.add(graph.getEdgeTarget(edge));
        }
        return new Route(list);
    }
}
